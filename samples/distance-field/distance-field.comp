#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (local_size_x = 16, local_size_y = 16) in;

struct Camera
{
  mat4 tx;
  float verticalFov;
  float focalDistance;
  float aperture;
  float padding;
};

struct Ray
{
  vec3 origin;
  vec3 direction;
};

struct Material
{
  vec3 albedo;
  float metalness;
  vec3 F0;
  float roughness;
};



//Generated image
layout (binding = 0, rgba8) uniform writeonly image2D result;

//Data sent from the client
layout (std140, binding = 1) uniform UBO
{
  uint sampleCount;
  uint maxBounces;
  uvec2 imageSize;
  Camera camera;
}globals;


layout (binding = 2) buffer SSBO
{
  mat4 tx;
  uint width;
  uint height;
  uint depth;
  uint padding;
  vec4 aabbMin;
  vec4 aabbMax;
  float data[];
}distanceField;


//Pseudo-random number generation
uint rng_state = 0;
uint wang_hash(in uint seed)
{
  seed = (seed ^ 61) ^ (seed >> 16);
  seed *= 9;
  seed = seed ^ (seed >> 4);
  seed *= 0x27d4eb2d;
  seed = seed ^ (seed >> 15);
  return seed;
}

float rand()
{
  rng_state ^= (rng_state << 13);
  rng_state ^= (rng_state >> 17);
  rng_state ^= (rng_state << 5);
  return float(rng_state) * (1.0 / 4294967296.0);
}

void GenerateCameraRay( in uint pixelX, in uint pixelY, out Ray ray)
{
  vec2 imagePlaneSize;
  imagePlaneSize.x = tan( globals.camera.verticalFov * 0.5f );
  imagePlaneSize.y = imagePlaneSize.x * float(globals.imageSize.y) / float(globals.imageSize.x);
  
  float pixelWidth = 1.0 / float(globals.imageSize.x);
  float pixelHeight = 1.0 / float(globals.imageSize.y);

  //Random point inside the pixel
  float u = ( pixelY + rand() ) * pixelWidth - 0.5f;
  float v = ( pixelX + rand() ) * pixelHeight - 0.5f;

  //Compute intersection with focal plane in world space
  vec4 focalPlaneIntersection = globals.camera.tx * vec4( u * imagePlaneSize.x * globals.camera.focalDistance, v * imagePlaneSize.y * globals.camera.focalDistance, -globals.camera.focalDistance, 1.0f );

  //Get random point in the lens in world space
  vec4 lensRadomPoint = globals.camera.tx * vec4( u * imagePlaneSize.x*(2.0f*rand()-1.0f) * globals.camera.aperture, v * imagePlaneSize.y *(2.0f*rand()-1.0f) * globals.camera.aperture, 0.0f, 1.0f );

  ray.direction = normalize( focalPlaneIntersection.xyz - lensRadomPoint.xyz );
  ray.origin = lensRadomPoint.xyz;
}

uvec3 localToGrid( vec4 local )
{
	uvec3 result;
	result.x = clamp( uint((local.x - distanceField.aabbMin.x) / (distanceField.aabbMax.x - distanceField.aabbMin.x) * (distanceField.width-1) + 0.5), 0, distanceField.width-1);
	result.y = clamp( uint((local.y - distanceField.aabbMin.y) / (distanceField.aabbMax.y - distanceField.aabbMin.y) * (distanceField.height-1) + 0.5), 0, distanceField.height-1);
	result.z = clamp( uint((local.z - distanceField.aabbMin.z) / (distanceField.aabbMax.z - distanceField.aabbMin.z) * (distanceField.depth-1) + 0.5), 0, distanceField.depth-1);
	
	return result;
}

//Return distance in x and material id in y
float Sphere( in vec3 p, vec3 center, float radius )
{
  vec3 v = center - p;
  return length(v) - radius;
}

//Return distance in x and material id in y
float HorizontalPlane( in vec3 p, float y )
{
	return p.y  + y;
}

float distanceFromDistanceField( vec3 point )
{
	//Iterate over all distance fields and return closest distance
	//1. Transform point to distance field local coordinate space
	//2. Get normalized coordinates
	//3. Clamp to [0,1]
	//4. Sample distance field
	
	//TODO: Pass inverse local matrix to transform from wo
	vec4 localCoord =  distanceField.tx * vec4(point,1.0);
	uvec3 gridCoord = localToGrid( localCoord );

	return min(distanceField.data[gridCoord.z*distanceField.width*distanceField.height + gridCoord.y*distanceField.width + gridCoord.x], HorizontalPlane(point,1.5));	
}




vec3 GetEnvironmentColor( in vec3 direction )
{
  return mix( vec3(0.1f,0.1f,0.3f),
              vec3(1.0f,0.6f,1.0f),
              clamp( -direction.y * 0.5f + 0.5f, 0.0, 1.0) );
}

void main()
{
  //Generate a random seed
  rng_state = wang_hash(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*globals.imageSize.x*(globals.sampleCount+1));

  //Generate camera ray
  Ray cameraRay;
  GenerateCameraRay( gl_GlobalInvocationID.y, gl_GlobalInvocationID.x, cameraRay);
	
  float distance = 0.0;
  uint iterationCount = 0;
  float color = 0.0;
  float tMax = 100.0;
  float t = 0.0;
  while( iterationCount < 300 && t<tMax )
  {
	distance = distanceFromDistanceField( cameraRay.origin + cameraRay.direction*t );
	if( abs(distance) < 0.1 )
	{
		color = 1.0;
		break;
	}
	
	t += abs(distance);
	++iterationCount;
  }

  color = iterationCount/300.0;
  imageStore(result,
             ivec2(gl_GlobalInvocationID.xy),
             vec4(color,color,color,1.0) );		 
	

}
